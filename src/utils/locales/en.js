const en = {
    localeName: 'en',
    localeChange: 'Language change',
    actions: {
        open: 'Open',
        cancel: 'Cancel',
        save: 'Save',
        delete: 'Delete',
        edit: 'Edit',
        itemDelete: 'Delete profile item',
        add: 'Add',
        gotIt: 'Got it',
        reload: 'Reload',
        ok: 'OK',
    },
    profiles: {
        singular: 'Profile',
        open: 'Open profile',
        name: 'Profile name',
        description: 'Profile description',
        created: 'Created',
        lastUpdate: 'Last update',
        profileTree: 'Profile tree',
        defaultName: 'Untitled',
        data: 'Data',
        components: 'Components',
        settings: 'Profile settings',
        save: 'Save profile',
    },
    data: {
        data: 'Data',
    },
    sources: {
        new: 'New source',
        name: 'Source name',
        type: 'Source type',
        from: 'Build from',
        params: 'Parameters',
        host: 'Host',
        port: 'Port',
        user: 'Username',
        password: 'Password',
        db: 'DB name',
        connStr: 'Connection string',
        plural: 'Sources',
        testConnection: 'Test connection',
        connectionTest: 'Connection test',
    },
    queries: {
        new: 'New query',
        name: 'Query name',
        from: 'Build from',
        expression: 'Expression',
        constructor: 'Constructor',
        source: 'Source',
        plural: 'Queries',
        run: 'Run query',
    },
    dataframes: {
        new: 'New dataframe',
        singular: 'Dataframe',
        plural: 'Dataframes',
        name: 'Dataframe name',
        from: 'Build from',
        fromExpression: 'Expression',
        fromQuery: 'Query result',
        expression: 'Expression',
        source: 'Source',
        query: 'Query',
        union: 'Union',
        unionPlural: 'Unions',
        newUnion: 'New union',
        join: 'Join',
        joinPlural: 'Joins',
        originalDfCol: 'Original dataframe column',
        joinableDfCol: 'Joinable dataframe column',
        joinType: 'Join type',
        extraCols: 'Extra columns',
        applyExpr: 'Apply expression to rows',
        colName: 'Column name',
        applyValue: 'Fill with value',
        filters: 'Filters',
        filtersOperators: {
            '>': '>',
            '>=': '>=',
            '<': '<',
            '<=': '<=',
            '==': 'Equal',
            '!=': 'Not equal',
            'contains': 'Contains',
            'startswith': 'Starts with',
            'endswith': 'Ends with',
            'in': 'In',
        },
        fromSettings: 'Settings',
        filterType: 'Filter type',
        filterValue: 'Value',
        convertTo: 'Conversion',
        conversions: {
            none: 'None',
            num: 'To number',
            bool: 'To boolean',
        },
        ordering: 'Ordering',
        orderingType: 'Ordering type',
        fillna: 'Filling empty values',
        fillnaAction: 'Action',
        fillnaActions: {
            fill: 'Fill with value',
            drop: 'Drop rows',
        },
        orderingTypes: {
            asc: 'ASC',
            desc: 'DESC',
        },
        dtypesConv: 'Types conversion',
        dtypes: {
            none: '--',
            int: 'To integer',
            float: 'To float',
            str: 'To string',
            datetime: 'To timestamp',
        },
        targetDtype: 'Convert to',
        run: 'Build dataframe',
    },
    tables: {
        singular: 'Table',
        plural: 'Tables',
        new: 'New table',
        name: 'Table name',
        from: 'Build from',
        dataframe: 'Dataframe',
        expression: 'Expression',
        exclude: 'Exclude columns',
        aliases: 'Columns aliases',
        colName: 'Column',
        colAlias: 'Alias',
        title: 'Table title',
        run: 'Build table',
    },
    components: {
        components: 'Components',
    },
    figures: {
        singular: 'Figure',
        plural: 'Figures',
        new: 'New figure',
        name: 'Figure name',
        dataframe: 'Dataframe',
        figureType: 'Figure type',
        from: 'Build from',
        figureTypes: {
            line: 'Line',
            pie: 'Pie',
            bar: 'Bar',
        },
        fromOptions: {
            dataframe: 'Dataframe',
            list: 'Datasets',
        },
        titleText: 'Figure title',
        showLegend: 'Show legend',
        datasets: 'Datasets',
        datasetName: 'Dataset name',
        datasetXExpression: 'X values expression',
        datasetYExpression: 'Y values expression',
        lineGroup: 'Line grouping by',
        aggDf: 'Aggregated dataframe',
        groupby: 'Group by',
        aggfunc: 'Aggregate function',
        aggOn: 'Column to aggregate',
        xCol: 'X values column',
        yCol: 'Y values column',
        pieNames: 'Names column',
        pieValues: 'Values column',
        orientation: 'Orientation',
        orientations: {
            h: 'Horizontal',
            v: 'Vertical',
        },
        run: 'Build figure',
    },
    values: {
        singular: 'Value',
        plural: 'Values',
        new: 'New value',
        name: 'Value name',
        expression: 'Expression',
        result: 'Result',
        run: 'Evaluate',
        hint: 'get values with get_value(%value_name%)',
    },
    documents: {
        singular: 'Document',
        plural: 'Documents',
        new: 'New document',
        name: 'Document name',
        components: 'Components',
        ctxCompontents: 'Available components',
        downloadPdf: 'Download PDF',
    },
    messages: {
        itemDelete: 'Delete this profile item?',
        valueCantBeDisplayed: "The value has been successfully evaluated, but can't be displayed.",
        localeChangeAlert: 'Language changing requires the editor to be reloaded.',
        connectionTestFailed: "Unable to establish the connection",
        connectionTestSuccess: 'The connection has been successfully established',
        unableToListProfiles: 'Unable to load profiles list',
        unableToGetProfile: 'Unable to load profile',
        errorWhenDeletingProfile: 'An error occurred while deleting profile',
        errorWhenCreatingProfile: 'An error occurred while creating profile',
        errorWhenSavingProfile: 'An error occurred while saving profile',
        errorWhenSavingSource: 'An error occurred while saving source',
        errorWhenSavingQuery: 'An error occurred while saving query',
        errorWhenSavingDataframe: 'An error occurred while saving dataframe',
        errorWhenSavingTable: 'An error occurred while saving table',
        errorWhenSavingFigure: 'An error occurred while saving figure',
        errorWhenSavingValue: 'An error occurred while saving value',
        errorWhenSavingDoc: 'An error occurred while saving document',
        errorWhenSavingDashboard: 'An error occurred while saving dashboard',
        errorWhenDeletingProfileItem: 'An error occurred while deleting profile item',
        errorWhenGettingDbStruct: 'An error occurred while obtaining database structure',
        sourceSavedSuccess: 'The source has been successfully saved',
        querySavedSuccess: 'The query has been successfully saved',
        dataframeSavedSuccess: 'The dataframe has been successfully saved',
        tableSavedSuccess: 'The table has been successfully saved',
        figureSavedSuccess: 'The figure has been successfully saved',
        docSavedSuccess: 'The document has been successfully saved',
        valueSavedSuccess: 'The value has been successfully saved',
        dashboardSavedSuccess: 'The dashboard has been successfully saved',
        profileSavedSuccess: 'The profile has been successfully saved',
        itemDeletedSuccess: 'Profile item successfully deleted',
        errorWhenGettingQueryData: 'An error occurred while running query',
        errorWhenGettingDataframeData: 'An error occurred while building dataframe',
        errorWhenGettingTableData: 'An error occurred while building table',
        errorWhenGettingFigureData: 'An error occurred while building figure',
        errorWhenGettingValueData: 'An error occurred while evaluating',
        errorWhenGettingDocData: 'An error occurred while creating document',
        queryDataSuccess: 'The query has been successfully performed',
        dataframeDataSuccess: 'The dataframe has been successfully built',
        tableDataSuccess: 'The table has been successfully built',
        figureDataSuccess: 'The figure has been successfully built',
        valueDataSuccess: 'The value has been successfully evaluated',
        errorWhenGettingWidgetData: 'An error occurred while loading widget data',
        errorWhenLoadingDashboard: 'An error occurred while loading dashboard',
    },
    dbstruct: {
        dbstruct: 'Database structure',
        fk: 'Foreign key',
    },
    aggFuncs: {
        sum: 'Sum',
        mean: 'Mean',
        min: 'Min',
        max: 'Max',
        count: 'Count',
        std: 'Standard deviation',
        var: 'Variance',
    },
    dashboards: {
        singular: 'Dashboard',
        plural: 'Dashboards',
        new: 'New dashboard',
        name: 'Dashboard name',
        description: 'Description',
        settings: 'Dashboard settings',
        widgetSettings: 'Widget settings',
        height: 'Height',
        width: 'Width',
        bindToGrid: 'Bind to grid',
        scaling: 'Use scaling',
        preview: 'Preview',
    },
    widgets: {
        singular: 'Widget',
        plural: 'Widgets',
        new: 'New widget',
        types: {
            text: 'Text',
            table: 'Table',
            figure: 'Figure',
        },
        text: 'Text',
        fontSize: 'Font size',
        fontColor: 'Font color',
        interprete: 'Interprete',
        table: 'Table',
        figure: 'Figure',
        title: 'Title',
    },
    locale: 'Language',
    export: {
        downloadCsv: 'Download CSV',
        downloadExcel: 'Download XLSX',
    },
}

export default en;